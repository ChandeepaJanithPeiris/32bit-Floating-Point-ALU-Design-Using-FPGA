module fp_multiplier (
    input logic [31:0] in1,
    input logic [31:0] in2,
    output logic [31:0] out
);

// Number 1
logic sign1 = in1[31];
logic [7:0] exp1 = in1[30:23];
logic [23:0] mantissa1 = {1'b1, in1[22:0]};  // 24-bit mantissa1

// Number 2
logic sign2 = in2[31];
logic [7:0] exp2 = in2[30:23];
logic [23:0] mantissa2 = {1'b1, in2[22:0]};  // 24-bit mantissa2

logic sign;
logic [7:0] exp;
logic [47:0] mult_mantissa;
logic [22:0] mantissa;  // Ensure this is declared as a 23-bit signal
logic [7:0] shift_amount;

assign sign = sign1 ^ sign2;

// Call to the binary multiplier module
binary_multiplier mult (
    .A(mantissa1),       // 24-bit mantissa1
    .B(mantissa2),       // 24-bit mantissa2
    .P(mult_mantissa)    // 48-bit product
);

// Right shift logic
right_shift rshift (
    .in(mult_mantissa),  // 48-bit input
    .shift_amount(shift_amount),
    .out(mantissa)       // 23-bit output
);

always_comb begin
    // Multiply two mantissas
    if (mult_mantissa[47] == 1'b1) begin
        shift_amount = 1; // If MSB == 1, right shift
        exp = exp1 + exp2 - 126; // Increase exponent by 1
    end else begin
        shift_amount = 0;
        exp = exp1 + exp2 - 127;
    end
end

endmodule
