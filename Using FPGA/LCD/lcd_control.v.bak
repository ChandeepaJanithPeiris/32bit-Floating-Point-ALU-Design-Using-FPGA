module lcd_controller(
    input Clk50Mhz, reset,
    output reg [7:0] LCD_DATA,    // reg type is used for signals that change over time
    output reg LCD_RW, LCD_EN, LCD_RS,
    output reg LCD_ON, LCD_BLON
);

    // Declare the state machine states using parameters
    // Verilog uses 'parameter' for constant values such as state encoding
    parameter s1 = 4'b0001, s2 = 4'b0010, s3 = 4'b0011, s4 = 4'b0100,
              s10 = 4'b1010, s11 = 4'b1011, s12 = 4'b1100, s13 = 4'b1101,
              s20 = 4'b1110, s21 = 4'b1111, s22 = 4'b10000, s23 = 4'b10001, s24 = 4'b10010;

    reg [3:0] state; // 4-bit wide state register

    integer count;
    integer clockticks;
    reg clock;   // 'reg' is used to hold values in sequential logic
    
    // LCD initialization sequence codes (arrays of 8-bit values)
    reg [7:0] initcode [6:0] = {8'h38, 8'h38, 8'h38, 8'h38, 8'h06, 8'h0F, 8'h01};
    
    // Welcome message (line1) and To ESDL Lab message (line2)
    reg [7:0] line1 [15:0] = {8'h31, 8'h30, 8'h31, 8'h31, 8'h31, 8'h31, 8'h31, 8'h31,
                              8'h30, 8'h30, 8'h31, 8'h31, 8'h30, 8'h30, 8'h31, 8'h30};
                              
    reg [7:0] line2 [15:0] = {8'h30, 8'h31, 8'h30, 8'h30, 8'h31, 8'h31, 8'h31, 8'h30,
                              8'h30, 8'h30, 8'h31, 8'h31, 8'h30, 8'h30, 8'h30, 8'h30};

    // Clock divider constants
    integer max = 50000;
    integer half = max / 2;

    // Process the state machine logic
    always @(posedge Clk50Mhz or posedge reset) begin
        if (reset) begin
            count <= 1;
            state <= s1;
            clockticks <= 0;
            LCD_ON <= 1'b1;
            LCD_BLON <= 1'b1;
        end else begin
            case (state)
                // LCD initialization sequence
                s1: begin
                    LCD_DATA <= initcode[count];
                    LCD_EN <= 1'b1;
                    LCD_RS <= 1'b0; // Instruction mode
                    LCD_RW <= 1'b0; // Write mode
                    state <= s2;
                end
                
                s2: begin
                    LCD_EN <= 1'b0;
                    count <= count + 1;
                    if (count <= 6) begin
                        state <= s1;
                    end else begin
                        state <= s10;
                    end
                end
                
                s10: begin
                    LCD_DATA <= 8'h80; // Address of first position on first line
                    LCD_EN <= 1'b1;
                    LCD_RS <= 1'b0; // Instruction mode
                    LCD_RW <= 1'b0; // Write mode
                    state <= s11;
                end
                
                s11: begin
                    LCD_EN <= 1'b0;
                    count <= 1;
                    state <= s12;
                end
                
                s12: begin
                    LCD_DATA <= line1[count];
                    LCD_EN <= 1'b1;
                    LCD_RS <= 1'b1; // Data mode
                    LCD_RW <= 1'b0; // Write mode
                    state <= s13;
                end
                
                s13: begin
                    LCD_EN <= 1'b0;
                    count <= count + 1;
                    if (count <= 15) begin
                        state <= s12;
                    end else begin
                        state <= s20;
                    end
                end
                
                s20: begin
                    LCD_DATA <= 8'hBF; // Address of first position on second line
                    LCD_EN <= 1'b1;
                    LCD_RS <= 1'b0; // Instruction mode
                    LCD_RW <= 1'b0; // Write mode
                    state <= s21;
                end
                
                s21: begin
                    LCD_EN <= 1'b0;
                    count <= 1;
                    state <= s22;
                end
                
                s22: begin
                    LCD_DATA <= line2[count];
                    LCD_EN <= 1'b1;
                    LCD_RS <= 1'b1; // Data mode
                    LCD_RW <= 1'b0; // Write mode
                    state <= s23;
                end
                
                s23: begin
                    LCD_EN <= 1'b0;
                    count <= count + 1;
                    if (count <= 15) begin
                        state <= s22;
                    end else begin
                        state <= s24;
                    end
                end
                
                s24: begin
                    state <= s24;
                end

                default: begin
                    state <= s24;
                end
            endcase
        end
    end

    // Clock divider logic
    always @(posedge Clk50Mhz) begin
        if (clockticks < max) begin
            clockticks <= clockticks + 1;
        end else begin
            clockticks <= 0;
        end
        if (clockticks < half) begin
            clock <= 1'b0;
        end else begin
            clock <= 1'b1;
        end
    end

endmodule
